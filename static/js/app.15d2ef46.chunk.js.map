{"version":3,"sources":["src/interfaces/card.ts","src/interfaces/message.ts","src/interfaces/index.ts","src/redux/actions/game.ts","src/redux/actions/webSocket.ts","src/screens/Lobby.tsx","src/components/InGame/EndModal.tsx","src/constants/turn_action.ts","src/utils/card.ts","src/components/CardContent.tsx","src/components/Card.tsx","src/components/InGame/TurnSentence.tsx","src/components/InGame/EndTurn.tsx","src/components/InGame/Footer.tsx","src/navigation/main.tsx","src/components/InGame/Header.tsx","src/components/InGame/PlayedCard.tsx","src/components/InGame/PlayedCards.tsx","src/screens/InGame.tsx","src/screens/GameLobby.tsx","src/constants/env.ts","src/utils/webSocket.ts","src/redux/saga/game.ts","src/navigation/NavigationActions.ts","src/redux/saga/webSocket.ts","src/redux/reducer/game.ts","src/redux/reducer/webSocket.ts","src/redux/store/middlewares/webSocketMiddleware.ts","src/redux/store/index.ts","App.tsx","webpack:////Users/avencat/ascenseur/index.js?00b4"],"names":["CARD_COLOR","SERVER_CARD_COLOR","convertServerCardColorToCardColor","color","CLUB","DIAMOND","HEART","SPADE","CardNumber","WEB_SOCKET_ACTION","GAME_ACTION_TYPES","WEB_SOCKET_ACTION_TYPES","WEB_SOCKET_CHANNEL","endGame","data","roundCount","winner","type","END_GAME","gameFull","gameId","GAME_FULL","gameInit","game","GAME_INIT","setBetForPlayer","bet","player","_id","SET_BET_FOR_PLAYER","setPlayer","SET_PLAYER","sendMessage","message","SEND_MESSAGE","setSocketId","socketId","SET_SOCKET_ID","Lobby","connect","state","games","dispatch","initGame","nbPlayers","name","INIT_GAME","joinGame","JOIN_GAME","memo","useState","gameSelected","setGameSelected","setName","setNbPlayers","onChangeText","useCallback","text","initGameCallback","joinGameCallback","setGameSelectedCallback","id","renderGame","item","TouchableOpacity","onPress","style","styles","Text","gameName","substring","length","increaseNbPlayers","Math","min","decreaseNbPlayers","max","SafeAreaView","FlatList","keyExtractor","extraData","Platform","OS","renderItem","gamesContainer","contentContainerStyle","gamesContentContainer","TextInput","placeholder","textInput","View","button","Button","title","nbPlayersContainer","nbPlayersTitle","nbPlayersButtonContainer","StyleSheet","create","marginHorizontal","marginTop","flexDirection","marginBottom","paddingLeft","backgroundColor","borderColor","borderRadius","borderWidth","height","paddingHorizontal","paddingVertical","paddingBottom","alignItems","justifyContent","borderBottomColor","borderBottomWidth","marginVertical","TURN_ACTION","EndModal","finalRoundCount","me","players","playersUnsorted","useMemo","sort","a","b","score","renderPlayer","row","gridColumnName","gridContent","gridColumn","center","renderItemSeparator","separator","renderTableHeader","gridHeader","amWinner","Modal","visible","modal","container","gridContainer","bounces","ItemSeparatorComponent","ListHeaderComponent","listKey","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","flex","borderLeftColor","borderLeftWidth","padding","width","Dimensions","get","fontSize","absoluteFillObject","isCardRed","createEmptyArray","emptyValue","arr","i","push","SERVER_CARD_COLOR_VALUE","DEFAULT_CARD_VALUE","1","2","3","4","5","6","7","8","9","10","11","12","13","sortCards","cards","asset","cardsToPlay","filter","card","cardColorValue","mainColor","sortServerCardColor","number","CardContent","value","columns","columnValue","floor","restValue","calculateColumns","StyleSheetCreator","map","column","index","key","elem","idx","columnItemSolo","columnItem","columnItemReversed","transform","rotate","Card","selected","activeOpacity","selectedContainer","topLeftContainer","bottomRightContainer","bottom","position","right","left","top","TurnSentence","currentPlayerTurn","isMyTurn","turnAction","comment","BET","textAlign","EndTurn","turnWinner","removeOldPlayedCards","REMOVE_OLD_PLAYED_CARDS","removeOldPlayedCardsCallback","isMe","danger","fontWeight","ROUTE_NAMES","InGameFooter","assetColor","round","hand","cardsDealt","oldPlayedCards","playCard","cardId","PLAY_CARD","validateBet","SET_BET","setBet","setCard","minify","setMinify","hasSetBet","increaseBet","decreaseBet","validateBetCallback","playCardCallback","undefined","selectCard","toggleMinify","renderCard","cardItem","identifier","convertPlayerCardToCard","singleCard","renderSeparator","titleContainer","horizontal","flatListContent","buttonContainer","buttonControllerContainer","isMinified","paddingRight","select","ios","PlatformColor","android","default","marginLeft","InGameHeader","oldAssetColor","oldAssetNumber","assetNumber","currentPlayerTurnId","isHisTurn","currentTurnName","turnWon","flexEnd","PlayedCard","serverCard","convertServerCardToCard","cardContainer","InGamePlayedCards","playedCards","renderPlayedCard","contentContainer","InGame","navigation","React","useEffect","addListener","e","preventDefault","Alert","alert","action","ListEmptyComponent","ListFooterComponent","flexGrow","GameLobby","gamePlayers","playerContainer","gameContainer","playersContainer","activityIndicatorView","ActivityIndicator","activityIndicatorText","Stack","createStackNavigator","MainNavigator","Navigator","initialRouteName","LOBBY","Screen","component","GAME_LOBBY","IN_GAME","options","gestureEnabled","headerShown","WS_URL","Constants","manifest","extra","formatPacketMessage","send_packet","to","formatConnectMessage","channels","connect_to","listGames","gameSaga","put","LIST_GAMES","playerCard","turn","gameTurn","takeLatest","navigationRef","createRef","navigate","params","Keyboard","dismiss","current","connectedSaga","messageReceivedSaga","invalidMessageReceivedSaga","webSocketSaga","console","log","from","messageMessage","GAMES_LIST","ERROR","GAME_JOINED","SET_GAME_ROUND","SET_PLAYERS","SET_PLAYER_POSITION","GAME_STARTED","WELCOME","SET_CARDS","SET_TURN","BET_SET","CARD_PLAYED","SET_CARD_COLOR","SET_SCORE","SET_TURN_WINNER","SHOULD_SET_BET","SHOULD_PLAY_CARD","SET_GAME","call","webSocket","SET_GAME_WITH_GAME_ID","SET_HAND","takeEvery","CONNECTED","MESSAGE_RECEIVED","INVALID_MESSAGE_RECEIVED","initialState","reactions","find","url","channel","connected","DISCONNECTED","persistConfig","storage","AsyncStorage","sagaMiddleware","createSagaMiddleware","reducers","combineReducers","prevState","persistedReducer","persistReducer","store","createStore","applyMiddleware","socket","TypeSocket","hasConnected","on","messageReceived","invalidMessageReceived","next","readyState","send","persistedStore","persistStore","run","App","loading","persistor","NavigationContainer","ref","registerRootComponent"],"mappings":"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","file":"static/js/app.15d2ef46.chunk.js","sourcesContent":["import { Player } from './player'\n\nexport enum CARD_COLOR {\n  CLUB = '♣️',\n  DIAMOND = '♦️',\n  HEART = '♥️',\n  SPADE = '♠️'\n}\n\nexport enum SERVER_CARD_COLOR {\n  'CLUB' = 'club',\n  'DIAMOND' = 'diamond',\n  'HEART' = 'heart',\n  'SPADE' = 'spade'\n}\n\nexport const convertServerCardColorToCardColor = (color: SERVER_CARD_COLOR): CARD_COLOR => {\n  switch (color) {\n    case SERVER_CARD_COLOR.CLUB:\n      return CARD_COLOR.CLUB\n    case SERVER_CARD_COLOR.DIAMOND:\n      return CARD_COLOR.DIAMOND\n    case SERVER_CARD_COLOR.HEART:\n      return CARD_COLOR.HEART\n    default:\n      return CARD_COLOR.SPADE\n  }\n}\n\nexport const CardNumber = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'P', 'D', 'M']\n\nexport interface Card {\n  color: CARD_COLOR\n  identifier: string\n  number: number\n  value: number\n}\n\nexport interface ServerCard {\n  _id: string\n  color: SERVER_CARD_COLOR\n  number: number\n  createdAt: string // Date\n  updatedAt: string // Date\n}\n\nexport interface PlayerCard {\n  _id: string\n  card: ServerCard\n  cardId: string\n  playerId: string\n  createdAt: string // Date\n  updatedAt: string // Date\n}\n\nexport interface PlayedCard {\n  card: ServerCard\n  player: Player\n}\n","export enum WEB_SOCKET_ACTION {\n  BET_SET = 'BET_SET',\n  CARD_PLAYED = 'CARD_PLAYED',\n  CONNECTED = 'CONNECTED',\n  DEAL_CARDS = 'DEAL_CARDS',\n  END_GAME = 'END_GAME',\n  ERROR = 'ERROR',\n  GAME_FULL = 'GAME_FULL',\n  GAME_INIT = 'GAME_INIT',\n  GAME_JOINED = 'GAME_JOINED',\n  GAMES_LIST = 'GAMES_LIST',\n  GAME_STARTED = 'GAME_STARTED',\n  INIT_GAME = 'INIT_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  LIST_GAMES = 'LIST_GAMES',\n  NOT_FOUND = 'NOT_FOUND',\n  PLAY_CARD = 'PLAY_CARD',\n  SET_BET = 'SET_BET',\n  SET_CARDS = 'SET_CARDS',\n  SET_CARD_COLOR = 'SET_CARD_COLOR',\n  SET_GAME_ROUND = 'SET_GAME_ROUND',\n  SET_PLAYER_POSITION = 'SET_PLAYER_POSITION',\n  SET_PLAYERS = 'SET_PLAYERS',\n  SET_SCORE = 'SET_SCORE',\n  SET_TURN = 'SET_TURN',\n  SET_TURN_WINNER = 'SET_TURN_WINNER',\n  SHOULD_PLAY_CARD = 'SHOULD_PLAY_CARD',\n  SHOULD_SET_BET = 'SHOULD_SET_BET',\n  START_GAME = 'START_GAME',\n  SUCCESS = 'SUCCESS',\n  WELCOME = 'WELCOME'\n}\n\n/* eslint-disable camelcase */\nexport type Message = {\n  connect_to: string[]\n} | {\n  send_packet: { to: string, message: any }\n} | {\n  from: string\n  message: any\n  to: string\n}\n/* eslint-enable camelcase */\n\nexport interface ServerMessage {\n  from: string\n  message: {\n    action: WEB_SOCKET_ACTION\n    data: any\n    message?: string\n  }\n  to: string\n}\n\n/* global Blob */\nexport type WebSocketData = string | ArrayBuffer | Blob | ArrayBufferView\n","export * from './card'\nexport * from './game'\nexport * from './redux'\nexport * from './player'\nexport * from './message'\n","import { CARD_COLOR } from '../../interfaces'\nimport type {\n  Game,\n  PlayedCard,\n  Player,\n  PlayerCard,\n  Round,\n  RoundTurn\n} from '../../interfaces'\n\nexport enum GAME_ACTION_TYPES {\n  CARD_PLAYED = 'CARD_PLAYED',\n  END_GAME = 'END_GAME',\n  INIT_GAME = 'INIT_GAME',\n  JOIN_GAME = 'JOIN_GAME',\n  LIST_GAMES = 'LIST_GAMES',\n  GAME_FULL = 'GAME_FULL',\n  GAME_INIT = 'GAME_INIT',\n  GAME_JOINED = 'GAME_JOINED',\n  GAMES_LIST = 'GAMES_LIST',\n  PLAY_CARD = 'PLAY_CARD',\n  REMOVE_OLD_PLAYED_CARDS = 'REMOVE_OLD_PLAYED_CARDS',\n  SET_BET = 'SET_BET',\n  SET_BET_FOR_PLAYER = 'SET_BET_FOR_PLAYER',\n  SET_CARD_COLOR = 'SET_CARD_COLOR',\n  SET_GAME = 'SET_GAME',\n  SET_GAME_ROUND = 'SET_GAME_ROUND',\n  SET_GAME_WITH_GAME_ID = 'SET_GAME_WITH_GAME_ID',\n  SET_HAND = 'SET_HAND',\n  SET_PLAYER = 'SET_PLAYER',\n  SET_PLAYERS = 'SET_PLAYERS',\n  SET_SCORE = 'SET_SCORE',\n  SET_TURN = 'SET_TURN',\n  SET_TURN_WINNER = 'SET_TURN_WINNER',\n  SHOULD_PLAY_CARD = 'SHOULD_PLAY_CARD',\n  SHOULD_SET_BET = 'SHOULD_SET_BET'\n}\n\nexport const cardPlayed = (card: PlayedCard) => ({\n  data: { card },\n  type: GAME_ACTION_TYPES.CARD_PLAYED\n})\n\nexport const endGame = ({\n  roundCount,\n  winner\n}: {\n  roundCount: number\n  winner: Player\n}) => ({\n  data: { roundCount, winner },\n  type: GAME_ACTION_TYPES.END_GAME\n})\n\nexport const gameFull = (gameId: string) => ({\n  data: { gameId },\n  type: GAME_ACTION_TYPES.GAME_FULL\n})\n\nexport const gameInit = (game: Game) => ({\n  data: { game },\n  type: GAME_ACTION_TYPES.GAME_INIT\n})\n\nexport const gameJoined = ({\n  gameId,\n  player\n}: {\n  gameId: string\n  player: Player\n}) => ({\n  data: { gameId, player },\n  type: GAME_ACTION_TYPES.GAME_JOINED\n})\n\nexport const gamesList = (games: Game[]) => ({\n  data: { games },\n  type: GAME_ACTION_TYPES.GAMES_LIST\n})\n\nexport const initGame = ({\n  name,\n  nbPlayers\n}: {\n  name: string\n  nbPlayers: number\n}) => ({\n  data: { name, nbPlayers },\n  type: GAME_ACTION_TYPES.INIT_GAME\n})\n\nexport const joinGame = (game: string, name: string) => ({\n  data: { game, name },\n  type: GAME_ACTION_TYPES.JOIN_GAME\n})\n\nexport const listGames = () => ({\n  type: GAME_ACTION_TYPES.LIST_GAMES\n})\n\nexport const playCard = (cardId: string) => ({\n  data: { cardId },\n  type: GAME_ACTION_TYPES.PLAY_CARD\n})\n\nexport const removeOldPlayedCards = () => ({\n  type: GAME_ACTION_TYPES.REMOVE_OLD_PLAYED_CARDS\n})\n\nexport const setBet = (bet: number) => ({\n  data: { bet },\n  type: GAME_ACTION_TYPES.SET_BET\n})\n\nexport const setBetForPlayer = ({\n  bet,\n  player\n}: {\n  bet: number\n  player: Player\n}) => ({\n  data: { bet, player: player?._id },\n  type: GAME_ACTION_TYPES.SET_BET_FOR_PLAYER\n})\n\nexport const setHand = (cards: PlayerCard[]) => ({\n  data: { cards },\n  type: GAME_ACTION_TYPES.SET_HAND\n})\n\nexport const setGame = (game: Game) => ({\n  data: { game },\n  type: GAME_ACTION_TYPES.SET_GAME\n})\n\nexport const setGameRound = (round: Round) => ({\n  data: { round },\n  type: GAME_ACTION_TYPES.SET_GAME_ROUND\n})\n\nexport const setGameWithGameId = (gameId: string) => ({\n  data: { gameId },\n  type: GAME_ACTION_TYPES.SET_GAME_WITH_GAME_ID\n})\n\nexport const setPlayer = (player: Player) => ({\n  data: { player },\n  type: GAME_ACTION_TYPES.SET_PLAYER\n})\n\nexport const setPlayers = (players: Player[]) => ({\n  data: { players },\n  type: GAME_ACTION_TYPES.SET_PLAYERS\n})\n\nexport const setScore = ({\n  player,\n  score\n}: {\n  player: string\n  score: number\n}) => ({\n  data: { player, score },\n  type: GAME_ACTION_TYPES.SET_SCORE\n})\n\nexport const setTurn = (turn: RoundTurn) => ({\n  data: { turn },\n  type: GAME_ACTION_TYPES.SET_TURN\n})\n\nexport const setTurnWinner = (player: Player) => ({\n  data: { player },\n  type: GAME_ACTION_TYPES.SET_TURN_WINNER\n})\n\nexport const shouldPlayCard = ({\n  player\n}: { player: Player }) => ({\n  data: { player },\n  type: GAME_ACTION_TYPES.SHOULD_PLAY_CARD\n})\n\nexport const shouldSetBet = ({\n  player\n}: { player: Player }) => ({\n  data: { player },\n  type: GAME_ACTION_TYPES.SHOULD_SET_BET\n})\n\nexport const setCardColor = ({\n  color\n}: { color: CARD_COLOR }) => ({\n  data: { color },\n  type: GAME_ACTION_TYPES.SET_CARD_COLOR\n})\n","import { Message, WebSocketData } from '../../interfaces'\n\nexport enum WEB_SOCKET_ACTION_TYPES {\n  CONNECTED = 'WEB_SOCKET_CONNECTED',\n  DISCONNECTED = 'WEB_SOCKET_DISCONNECTED',\n  INVALID_MESSAGE_RECEIVED = 'WEB_SOCKET_INVALID_MESSAGE_RECEIVED',\n  MESSAGE_RECEIVED = 'WEB_SOCKET_MESSAGE_RECEIVED',\n  SEND_MESSAGE = 'WEB_SOCKET_SEND_MESSAGE',\n  SET_SOCKET_ID = 'SET_SOCKET_ID'\n}\n\nexport enum WEB_SOCKET_CHANNEL {\n  LOBBY = 'lobby'\n}\n\nexport const invalidMessageReceived = (message: WebSocketData) => ({\n  data: { message },\n  type: WEB_SOCKET_ACTION_TYPES.INVALID_MESSAGE_RECEIVED\n})\n\nexport const messageReceived = (message: Message) => ({\n  data: { message },\n  type: WEB_SOCKET_ACTION_TYPES.MESSAGE_RECEIVED\n})\n\nexport const sendMessage = (message: Message) => ({\n  data: { message },\n  type: WEB_SOCKET_ACTION_TYPES.SEND_MESSAGE\n})\n\nexport const setSocketId = (socketId: number) => ({\n  data: { socketId },\n  type: WEB_SOCKET_ACTION_TYPES.SET_SOCKET_ID\n})\n","import { connect } from 'react-redux'\nimport { Action, Dispatch } from 'redux'\nimport React, { memo, useCallback, useState } from 'react'\nimport {\n  Button,\n  FlatList,\n  Platform,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  TextInput,\n  TouchableOpacity,\n  View\n} from 'react-native'\n\nimport { Game, GlobalState } from '../interfaces'\nimport { initGame, joinGame } from '../redux/actions'\n\ninterface DispatchProps {\n  initGame(nbPlayers: number, name: string): void\n  joinGame(game: string, name: string): void\n}\n\ninterface StateProps {\n  games: Game[]\n}\n\ntype Props = DispatchProps & StateProps\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>): DispatchProps => ({\n  initGame: (nbPlayers, name) => dispatch(\n    initGame({ name, nbPlayers })\n  ),\n  joinGame: (game, name) => dispatch(joinGame(game, name))\n})\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  games: state.game.games\n})\n\nconst Lobby = connect(mapStateToProps, mapDispatchToProps)(memo<Props>(({\n  games,\n  initGame,\n  joinGame\n}) => {\n  const [gameSelected, setGameSelected] = useState<string>()\n  const [name, setName] = useState<string>()\n  const [nbPlayers, setNbPlayers] = useState<number>(3)\n\n  const onChangeText = useCallback((text: string) => setName(text), [setName])\n  const initGameCallback = useCallback(() => {\n    if (name) {\n      initGame(nbPlayers, name)\n    }\n  }, [initGame, name, nbPlayers])\n  const joinGameCallback = useCallback(() => {\n    if (gameSelected && name) {\n      joinGame(gameSelected, name)\n    }\n  }, [gameSelected, name])\n  const setGameSelectedCallback = useCallback((id: string) => () => {\n    setGameSelected(id)\n  }, [setGameSelected])\n\n  const renderGame = useCallback(({ item }: { item: Game }) => {\n    return (\n      <TouchableOpacity\n        onPress={setGameSelectedCallback(item._id)}\n        style={styles.game}\n      >\n        {\n          gameSelected === item._id\n            ? <Text style={styles.gameName}>[x]</Text>\n            : <Text style={styles.gameName}>[  ]</Text>\n        }\n        <Text style={styles.gameName}>\n          {`${\n            item.name || item._id\n          } (${\n            item._id.substring(item._id.length - 4)\n          }) - ${\n            item.nbPlayers\n          } joueurs`}\n        </Text>\n      </TouchableOpacity>\n    )\n  }, [gameSelected])\n\n  const increaseNbPlayers = useCallback(() => {\n    setNbPlayers(Math.min(nbPlayers + 1, 10))\n  }, [nbPlayers])\n\n  const decreaseNbPlayers = useCallback(() => {\n    setNbPlayers(Math.max(nbPlayers - 1, 3))\n  }, [nbPlayers])\n\n  return (\n    <SafeAreaView>\n      {/* web needs extraData otherwise it won't update, don't know why */}\n      <FlatList\n        keyExtractor={(item: Game) => item?._id}\n        data={games}\n        extraData={Platform.OS === 'web' && gameSelected}\n        renderItem={renderGame}\n        style={styles.gamesContainer}\n        contentContainerStyle={styles.gamesContentContainer}\n      />\n      <TextInput\n        onChangeText={onChangeText}\n        placeholder=\"Nom d'utilisateur\"\n        style={styles.textInput}\n      />\n      <View style={styles.button}>\n        <Button title='Rejoindre une partie' onPress={joinGameCallback} />\n      </View>\n      <View style={styles.nbPlayersContainer}>\n        <Text style={styles.nbPlayersTitle}>Nombre de joueurs</Text>\n        <View style={styles.nbPlayersButtonContainer}>\n          <Button title='-' onPress={decreaseNbPlayers} />\n          <Text style={styles.nbPlayers}>{nbPlayers}</Text>\n          <Button title='+' onPress={increaseNbPlayers} />\n        </View>\n      </View>\n      <View style={styles.button}>\n        <Button title='Créer une partie' onPress={initGameCallback} />\n      </View>\n    </SafeAreaView>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  button: {\n    marginHorizontal: 15,\n    marginTop: 10\n  },\n\n  game: {\n    flexDirection: 'row',\n    marginBottom: 5\n  },\n\n  gameName: {\n    paddingLeft: 5\n  },\n\n  gamesContainer: {\n    backgroundColor: 'white',\n    borderColor: 'grey',\n    borderRadius: 3,\n    borderWidth: 1,\n    height: 150,\n    marginHorizontal: 15,\n    marginTop: 25,\n    paddingHorizontal: 15,\n    paddingVertical: 10\n  },\n\n  gamesContentContainer: {\n    paddingBottom: 20\n  },\n\n  nbPlayers: {\n    marginHorizontal: 10\n  },\n\n  nbPlayersButtonContainer: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n\n  nbPlayersContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginBottom: 5,\n    marginTop: 10\n  },\n\n  nbPlayersTitle: {\n    marginBottom: 10\n  },\n\n  textInput: {\n    borderBottomColor: 'grey',\n    borderBottomWidth: 1,\n    marginHorizontal: 15,\n    marginVertical: 10,\n    paddingHorizontal: 5,\n    paddingVertical: 10\n  }\n})\n\nexport default Lobby\n","import React, { memo, useCallback, useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  Dimensions,\n  FlatList,\n  Modal,\n  Platform,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  View\n} from 'react-native'\n\nimport { GlobalState, Player } from '../../interfaces'\n\ninterface StateProps {\n  finalRoundCount?: number\n  me?: Player\n  players: Player[]\n  winner?: Player\n}\n\ntype Props = StateProps\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  finalRoundCount: state.game.finalRoundCount,\n  me: state.game.player,\n  players: state.game.players,\n  winner: state.game.winner\n})\n\nconst EndModal = connect(mapStateToProps)(memo<Props>(({\n  finalRoundCount,\n  me,\n  players: playersUnsorted,\n  winner\n}) => {\n  const players = useMemo(() => (\n    playersUnsorted.sort((a, b) => b.score - a.score)\n  ), [playersUnsorted])\n\n  const renderPlayer = useCallback(({ item }: { item: Player }) => {\n    return (\n      <View style={styles.row}>\n        <View style={styles.gridColumnName}>\n          <Text style={styles.gridContent}>\n            {item.name}\n          </Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridContent}>{item.score}</Text>\n        </View>\n      </View>\n    )\n  }, [])\n\n  const renderItemSeparator = useCallback(() => {\n    return <View style={styles.separator} />\n  }, [])\n\n  const renderTableHeader = useCallback(() => {\n    return (\n      <View style={[styles.row, styles.separator]}>\n        <View style={styles.gridColumnName}>\n          <Text style={styles.gridHeader}>Nom</Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridHeader}>Score</Text>\n        </View>\n      </View>\n    )\n  }, [])\n  const amWinner = useMemo(() => me && winner?._id === me?._id, [me, winner])\n\n  // @TODO Remove once Expo upgrades react-native-web to v0.14 (also remove custom modal style)\n  if (!winner) {\n    return null\n  }\n\n  return (\n    <Modal visible={!!winner} style={Platform.OS === 'web' && styles.modal}>\n      {/* @TODO remove custom <Modal> styles once react-native-web has been updated to 0.14 */}\n      <SafeAreaView style={styles.container}>\n        <Text>\n          {'Vous avez '}\n          <Text style={{ color: amWinner ? 'green' : 'orange' }}>\n            {amWinner ? 'gagné !' : 'perdu'}\n          </Text>\n          {` en ${\n            finalRoundCount || 0\n          } manches`}\n        </Text>\n\n        <View style={styles.gridContainer}>\n          <FlatList\n            bounces={false}\n            data={players}\n            ItemSeparatorComponent={renderItemSeparator}\n            keyExtractor={item => item._id}\n            ListHeaderComponent={renderTableHeader}\n            listKey='firstPlayers'\n            renderItem={renderPlayer}\n            showsHorizontalScrollIndicator={false}\n            showsVerticalScrollIndicator={false}\n          />\n        </View>\n      </SafeAreaView>\n    </Modal>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  center: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    justifyContent: 'center'\n  },\n\n  gridColumn: {\n    borderLeftColor: 'black',\n    borderLeftWidth: 1,\n    flex: 4\n  },\n\n  gridColumnName: {\n    flex: 7,\n    padding: 5\n  },\n\n  gridContainer: {\n    borderColor: 'black',\n    borderWidth: 1,\n    marginHorizontal: 15,\n    marginTop: 50,\n    width: Dimensions.get('window').width - 30\n  },\n\n  gridContent: {\n    fontSize: 12\n  },\n\n  gridHeader: {\n    fontSize: 13\n  },\n\n  // @TODO Remove once react-native-web 0.14 is available on this project\n  modal: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'white'\n  },\n\n  row: {\n    flexDirection: 'row'\n  },\n\n  separator: {\n    borderBottomColor: 'black',\n    borderBottomWidth: 1\n  }\n})\n\nexport default EndModal\n","export enum TURN_ACTION {\n  BET = 'BET',\n  PLAY_CARD = 'PLAY_CARD'\n}\n","import {\n  Card,\n  CARD_COLOR,\n  convertServerCardColorToCardColor,\n  PlayerCard,\n  SERVER_CARD_COLOR,\n  ServerCard\n} from '../interfaces'\n\nconst generateColorCards = (color: CARD_COLOR): Card[] => {\n  const cards = []\n\n  for (let number = 1; number < 14; number += 1) {\n    cards.push({\n      color,\n      identifier: `${number}-${color}`,\n      number,\n      value: number\n    })\n  }\n\n  return cards\n}\n\nexport const generateDeck = (): Card[] => [\n  ...generateColorCards(CARD_COLOR.CLUB),\n  ...generateColorCards(CARD_COLOR.DIAMOND),\n  ...generateColorCards(CARD_COLOR.HEART),\n  ...generateColorCards(CARD_COLOR.SPADE)\n]\n\nexport const isCardRed = (color: CARD_COLOR): boolean => color === CARD_COLOR.HEART || color === CARD_COLOR.DIAMOND\n\nexport const isCardBlack = (color: CARD_COLOR): boolean => color === CARD_COLOR.SPADE || color === CARD_COLOR.CLUB\n\n/**\n * Return a new array made by the initial array shuffled\n * @param {Array} arr\n */\nexport const shuffle = <T>(arr: T[]): T[] => {\n  const array = [...arr]\n\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n\n    // swap elements array[i] and array[j]\n    // we use \"destructuring assignment\" syntax to achieve that\n    // you'll find more details about that syntax in later chapters\n    // same can be written as:\n    // let t = array[i]; array[i] = array[j]; array[j] = t\n    [array[i], array[j]] = [array[j], array[i]]\n  }\n\n  return array\n}\n\nconst createEmptyArray = <T>(length: number, emptyValue: T) => {\n  const arr = []\n\n  for (let i = 0; i < length; i += 1) {\n    arr.push(emptyValue)\n  }\n\n  return arr\n}\n\nexport const calculateColumns = (value: number) => {\n  if (value < 4 || value > 10) {\n    return [createEmptyArray(value, '')]\n  }\n\n  const columnValue = Math.floor(Math.min(value / 2, value > 8 ? 4 : 3))\n\n  const restValue = value % columnValue\n\n  const columns = []\n\n  columns.push(createEmptyArray(columnValue, ''))\n\n  if (restValue) {\n    columns.push(createEmptyArray(restValue, ''))\n  }\n\n  columns.push(createEmptyArray(columnValue, ''))\n\n  return columns\n}\n\nexport const convertPlayerCardToCard = ({ _id, card }: PlayerCard): Card => ({\n  color: convertServerCardColorToCardColor(card.color),\n  identifier: _id,\n  number: card.number,\n  value: card.number\n})\n\nexport const convertServerCardToCard = (card: ServerCard): Card => ({\n  color: convertServerCardColorToCardColor(card.color),\n  identifier: card._id,\n  number: card.number,\n  value: card.number\n})\n\nconst SERVER_CARD_COLOR_VALUE = {\n  [SERVER_CARD_COLOR.CLUB]: 0,\n  [SERVER_CARD_COLOR.DIAMOND]: 1,\n  [SERVER_CARD_COLOR.HEART]: 2,\n  [SERVER_CARD_COLOR.SPADE]: 3\n}\n\nexport const sortServerCardColor = (a: SERVER_CARD_COLOR, b: SERVER_CARD_COLOR, mainColor?: SERVER_CARD_COLOR) => {\n  if (a === b) {\n    return 0\n  } else if (a === mainColor) {\n    return -1\n  } else if (b === mainColor) {\n    return 1\n  }\n\n  return SERVER_CARD_COLOR_VALUE[a] - SERVER_CARD_COLOR_VALUE[b]\n}\n\nconst DEFAULT_CARD_VALUE = {\n  1: 13,\n  2: 1,\n  3: 2,\n  4: 3,\n  5: 4,\n  6: 5,\n  7: 6,\n  8: 7,\n  9: 8,\n  10: 9,\n  11: 10,\n  12: 11,\n  13: 12\n}\n\nexport const sortCards = (cards: PlayerCard[], color?: SERVER_CARD_COLOR, asset?: SERVER_CARD_COLOR) => {\n  const cardsToPlay = cards\n    .filter(({ card }) => card.color === color)\n\n  return [...(cardsToPlay.length ? cardsToPlay : cards)]\n    .sort(({ card: a }, { card: b }) => {\n      const cardColorValue = sortServerCardColor(a.color, b.color, asset)\n\n      if (cardColorValue !== 0) {\n        return cardColorValue\n      }\n\n      // @ts-ignore\n      return DEFAULT_CARD_VALUE[a.number] - DEFAULT_CARD_VALUE[b.number]\n    })\n}\n","import React, { memo, useMemo } from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nimport { CARD_COLOR } from '../interfaces'\nimport { calculateColumns } from '../utils'\n\ninterface Props {\n  color: CARD_COLOR\n  value: number\n  width?: number\n}\n\nconst CardContent = memo<Props>(({ color, value, width }) => {\n  const columns = useMemo(() => value > 10 ? [['']] : calculateColumns(value), [value])\n  const styles = useMemo(() => StyleSheetCreator(width), [width])\n\n  return (\n    <View style={styles.container}>\n      {columns.map((column: string[], index: number) => (\n        <View style={styles.column} key={`${color}-${index}`}>\n          {column.map((elem, idx, arr) => (\n            <Text\n              key={`${color}-${index}-${idx}`}\n              style={[\n                arr.length < 2 && index === 0 ? styles.columnItemSolo : styles.columnItem,\n                idx >= arr.length / 2 && styles.columnItemReversed\n              ]}\n            >\n              {`${color}`}\n            </Text>\n          ))}\n        </View>\n      ))}\n    </View>\n  )\n})\n\nconst StyleSheetCreator = (width = 120) => StyleSheet.create({\n  column: {\n    alignItems: 'center',\n    height: '100%',\n    justifyContent: 'space-evenly'\n  },\n\n  columnItem: {\n    fontSize: Math.floor(12 / 120 * width)\n  },\n\n  columnItemReversed: {\n    transform: [{\n      rotate: '180deg'\n    }]\n  },\n\n  columnItemSolo: {\n    fontSize: Math.floor(50 / 120 * width)\n  },\n\n  container: {\n    alignItems: 'center',\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    marginHorizontal: Math.floor(20 / 120 * width),\n    marginVertical: Math.floor(10 / 120 * width)\n  }\n})\n\nexport default CardContent\n","import React, { memo, useMemo } from 'react'\nimport {\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View,\n  ViewStyle\n} from 'react-native'\n\nimport { isCardRed } from '../utils'\nimport { Card as CardInterface, CARD_COLOR, CardNumber } from '../interfaces'\n\nimport CardContent from './CardContent'\n\ninterface Props extends CardInterface {\n  onPress?(): void\n  selected?: boolean\n  style?: ViewStyle\n  width?: number\n}\n\nconst Card = memo<Props>(({\n  color,\n  number,\n  onPress,\n  selected,\n  style,\n  value,\n  width\n}) => {\n  const styles = useMemo(() => StyleSheetCreator(color, width), [color]);\n\n  return (\n    <TouchableOpacity\n      activeOpacity={1}\n      onPress={onPress}\n      style={[styles.container, selected && styles.selectedContainer, style]}\n    >\n      <CardContent color={color} value={value} width={width} />\n\n      <View style={styles.topLeftContainer}>\n        <Text style={styles.number}>{`${CardNumber[number - 1]}`}</Text>\n\n        <Text style={styles.text}>{`${color}`}</Text>\n      </View>\n\n      <View style={styles.bottomRightContainer}>\n        <Text style={styles.number}>{`${CardNumber[number - 1]}`}</Text>\n\n        <Text style={styles.text}>{`${color}`}</Text>\n      </View>\n    </TouchableOpacity>\n  )\n})\n\nconst StyleSheetCreator = (color: CARD_COLOR, width = 120) => (\n  StyleSheet.create({\n    bottomRightContainer: {\n      alignItems: 'center',\n      bottom: Math.floor(6 / 120 * width),\n      position: 'absolute',\n      right: Math.floor(6 / 120 * width),\n      transform: [{\n        rotate: '180deg'\n      }]\n    },\n\n    container: {\n      backgroundColor: 'white',\n      borderColor: 'black',\n      borderRadius: Math.floor(10 / 120 * width),\n      borderWidth: Math.floor(2 / 120 * width),\n      height: Math.floor((170 / 120) * width),\n      width\n    },\n\n    number: {\n      color: isCardRed(color) ? 'red' : 'black',\n      fontSize: Math.floor(12 / 120 * width)\n    },\n\n    selectedContainer: {\n      borderColor: 'blue'\n    },\n\n    text: {\n      fontSize: Math.floor(10 / 120 * width)\n    },\n\n    topLeftContainer: {\n      alignItems: 'center',\n      left: Math.floor(6 / 120 * width),\n      position: 'absolute',\n      top: Math.floor(6 / 120 * width)\n    }\n  })\n)\n\nexport default Card\n","import React, { memo } from 'react'\nimport { connect } from 'react-redux'\nimport { StyleSheet, Text } from 'react-native'\n\nimport { GlobalState, Player } from '../../interfaces'\nimport { TURN_ACTION } from '../../constants/turn_action'\n\ninterface StateProps {\n  currentPlayerTurn?: Player\n  isMyTurn?: boolean\n  turnAction: TURN_ACTION\n}\n\ntype Props = StateProps\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  currentPlayerTurn: state.game.currentPlayerTurn,\n  isMyTurn: state.game.currentPlayerTurn?._id === state.game.player?._id,\n  turnAction: state.game.turnAction\n})\n\nconst TurnSentence = connect(mapStateToProps)(memo<Props>(({\n  currentPlayerTurn,\n  isMyTurn,\n  turnAction\n}) => {\n  return (\n    <Text style={styles.comment}>\n      {`C'est ${\n        !isMyTurn ? `au tour de ${currentPlayerTurn?.name}` : 'à mon tour'\n      } de ${\n        turnAction === TURN_ACTION.BET ? `valider le contrat.` : 'jouer.'\n      }`}\n    </Text>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  comment: {\n    marginHorizontal: 15,\n    marginVertical: 20,\n    textAlign: 'center'\n  }\n})\n\nexport default TurnSentence\n","import { connect } from 'react-redux'\nimport { Action, Dispatch } from 'redux'\nimport { Button, StyleSheet, Text } from 'react-native'\nimport React, { memo, useCallback, useMemo } from 'react'\n\nimport TurnSentence from './TurnSentence'\nimport { GlobalState, Player } from '../../interfaces'\nimport { removeOldPlayedCards } from '../../redux/actions'\n\ninterface DispatchProps {\n  removeOldPlayedCards(): void\n}\n\ninterface StateProps {\n  isMyTurn?: boolean\n  me?: Player\n  turnWinner?: Player\n}\n\ntype Props = DispatchProps & StateProps\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>): DispatchProps => ({\n  removeOldPlayedCards: () => dispatch(removeOldPlayedCards())\n})\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  isMyTurn: state.game.currentPlayerTurn?._id === state.game.player?._id,\n  me: state.game.player,\n  turnWinner: state.game.turnWinner\n})\n\nconst EndTurn = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(memo<Props>(({\n  isMyTurn,\n  me,\n  removeOldPlayedCards,\n  turnWinner\n}) => {\n  const removeOldPlayedCardsCallback = useCallback(() => {\n    removeOldPlayedCards()\n  }, [])\n\n  const isMe = useMemo(() => me?._id === turnWinner?._id, [turnWinner, me])\n\n  return (\n    <>\n      <Text style={styles.title}>\n        {isMe\n          ? 'Vous avez remporté le pli'\n          : `${turnWinner?.name} a remporté le pli`\n        }\n      </Text>\n\n      <Button title='Continuer' onPress={removeOldPlayedCardsCallback} />\n\n      {!!isMyTurn && (\n        <Text style={styles.danger}>C'est à vous de jouer !!!</Text>\n      )}\n\n      <TurnSentence />\n    </>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  danger: {\n    color: 'red',\n    fontSize: 25,\n    fontWeight: 'bold',\n    marginTop: 20,\n    textAlign: 'center'\n  },\n\n  title: {\n    fontSize: 25,\n    marginBottom: 20,\n    marginHorizontal: 15,\n    textAlign: 'center'\n  }\n})\n\nexport default EndTurn\n","import { connect } from 'react-redux'\nimport { Action, Dispatch } from 'redux'\nimport React, { memo, useCallback, useMemo, useState } from 'react'\nimport {\n  Button,\n  FlatList,\n  Platform,\n  PlatformColor,\n  StyleSheet,\n  Text,\n  TouchableOpacity,\n  View\n} from 'react-native'\n\nimport Card from '../Card'\nimport EndTurn from './EndTurn'\nimport TurnSentence from './TurnSentence'\nimport { TURN_ACTION } from '../../constants/turn_action'\nimport { convertPlayerCardToCard, sortCards } from '../../utils'\nimport { playCard, setBet as validateBet } from '../../redux/actions'\nimport {\n  GlobalState,\n  PlayedCard,\n  Player,\n  PlayerCard,\n  SERVER_CARD_COLOR\n} from '../../interfaces'\n\ninterface DispatchProps {\n  playCard(id: string): void\n  validateBet(bet: number): void\n}\n\ninterface StateProps {\n  assetColor?: SERVER_CARD_COLOR\n  cards: PlayerCard[]\n  cardsDealt?: number\n  color?: SERVER_CARD_COLOR\n  currentPlayerTurn?: Player\n  isMyTurn: boolean\n  me?: Player\n  oldPlayedCards: PlayedCard[]\n  turnAction: TURN_ACTION\n}\n\ntype Props = DispatchProps & StateProps\n\nconst mapDispatchToProps = (dispatch: Dispatch<Action>): DispatchProps => ({\n  playCard: (id: string) => dispatch(playCard(id)),\n  validateBet: (bet: number) => dispatch(validateBet(bet))\n})\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  assetColor: state.game.round?.asset,\n  cards: state.game.hand,\n  cardsDealt: state.game.round?.cardsDealt,\n  color: state.game.color,\n  currentPlayerTurn: state.game.currentPlayerTurn,\n  isMyTurn: state.game.currentPlayerTurn?._id === state.game.player?._id,\n  me: state.game.player,\n  oldPlayedCards: state.game.oldPlayedCards,\n  turnAction: state.game.turnAction\n})\n\nconst InGameFooter = connect(mapStateToProps, mapDispatchToProps)(memo<Props>(({\n  assetColor,\n  cards,\n  cardsDealt,\n  color,\n  isMyTurn,\n  me,\n  oldPlayedCards,\n  playCard,\n  validateBet\n}) => {\n  const [bet, setBet] = useState<number>(0)\n  const [card, setCard] = useState<string>()\n  const [minify, setMinify] = useState<boolean>(false)\n\n  const hasSetBet = useMemo(() => typeof me?.bet === 'number', [me])\n  const styles = useMemo(() => StyleSheetCreator(minify), [minify])\n\n  const increaseBet = useCallback(() => {\n    setBet(Math.min(cardsDealt || 0, bet + 1))\n  }, [bet, cardsDealt])\n  const decreaseBet = useCallback(() => {\n    setBet(Math.max(0, bet - 1))\n  }, [bet])\n\n  const validateBetCallback = useCallback(() => {\n    validateBet(bet)\n  }, [bet])\n  const playCardCallback = useCallback(() => {\n    if (card) {\n      playCard(card)\n      setCard(undefined)\n    }\n  }, [card])\n  const selectCard = useCallback((cardId: string) => () => {\n    if (card === cardId) {\n      setCard(undefined)\n    } else {\n      setCard(cardId)\n    }\n  }, [card])\n\n  const toggleMinify = useCallback(() => {\n    setMinify(!minify)\n  }, [minify])\n\n  const renderCard = useCallback(({ item }: { item: PlayerCard }) => {\n    const cardItem = convertPlayerCardToCard(item)\n\n    return (\n      <Card\n        {...cardItem}\n        onPress={hasSetBet ? selectCard(item._id) : undefined}\n        selected={card === item._id}\n        style={minify ? styles.singleCard : undefined}\n      />\n    )\n  }, [card, hasSetBet, minify])\n  const renderSeparator = useCallback(() => (\n    <View style={styles.separator} />\n  ), [])\n\n  if (oldPlayedCards.length) {\n    return <EndTurn />\n  }\n\n  return (\n    <>\n      <View style={styles.titleContainer}>\n        <Text style={styles.title}>\n          {`Mes cartes (${cards.length}) :`}\n        </Text>\n\n        {cards.length > 3 && (\n          <TouchableOpacity onPress={toggleMinify}>\n            <Text style={styles.minify}>\n              {minify ? 'Espacer' : 'Minifier'}\n            </Text>\n          </TouchableOpacity>\n        )}\n      </View>\n      <FlatList\n        keyExtractor={item => item._id}\n        data={sortCards(cards, color, assetColor)}\n        horizontal\n        ItemSeparatorComponent={renderSeparator}\n        renderItem={renderCard}\n        showsHorizontalScrollIndicator={false}\n        contentContainerStyle={styles.flatListContent}\n      />\n      {!hasSetBet && isMyTurn && (\n        <View style={styles.buttonContainer}>\n          <View style={styles.buttonControllerContainer}>\n            <Button title='-' onPress={decreaseBet} />\n            <Text>{bet}</Text>\n            <Button title='+' onPress={increaseBet} />\n          </View>\n          <Button title='Valider le contrat' onPress={validateBetCallback} />\n        </View>\n      )}\n      {!!card && isMyTurn && (\n        <Button title='Valider la carte' onPress={playCardCallback} />\n      )}\n      <TurnSentence />\n    </>\n  )\n}))\n\nconst StyleSheetCreator = (isMinified: boolean) => StyleSheet.create({\n  buttonContainer: {\n    alignItems: 'center'\n  },\n\n  buttonControllerContainer: {\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n\n  flatListContent: {\n    paddingLeft: isMinified ? 120 : 15,\n    paddingRight: 15\n  },\n\n  minify: {\n    ...Platform.select({\n      ios: {\n        color: typeof PlatformColor === 'function' && PlatformColor('link')\n      },\n      android: {\n        color: typeof PlatformColor === 'function' && PlatformColor('?attr/autoLink')\n      },\n      default: { color: 'blue' }\n    }),\n    marginBottom: 10,\n    marginHorizontal: 15\n  },\n\n  separator: {\n    width: 10\n  },\n\n  singleCard: {\n    marginLeft: isMinified ? -105 : undefined\n  },\n\n  title: {\n    marginBottom: 10,\n    marginHorizontal: 15\n  },\n\n  titleContainer: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n})\n\nexport default InGameFooter\n","import React from 'react'\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport Lobby from '../screens/Lobby'\nimport InGame from '../screens/InGame'\nimport GameLobby from '../screens/GameLobby'\n\n// @XXX: Interfaces won't work\nexport type MainStackParamList = {\n  [ROUTE_NAMES.LOBBY]: undefined\n  [ROUTE_NAMES.GAME_LOBBY]: undefined\n  [ROUTE_NAMES.IN_GAME]: undefined\n}\n\nconst Stack = createStackNavigator<MainStackParamList>();\n\nexport enum ROUTE_NAMES {\n  LOBBY = 'Lobby',\n  GAME_LOBBY = 'GameLobby',\n  IN_GAME = 'InGame'\n}\n\nconst MainNavigator = () => (\n  <Stack.Navigator initialRouteName={ROUTE_NAMES.LOBBY}>\n    <Stack.Screen name={ROUTE_NAMES.LOBBY} component={Lobby} />\n\n    <Stack.Screen name={ROUTE_NAMES.GAME_LOBBY} component={GameLobby} />\n\n    <Stack.Screen\n      name={ROUTE_NAMES.IN_GAME}\n      component={InGame}\n      options={{ gestureEnabled: false, headerShown: false }}\n    />\n  </Stack.Navigator>\n)\n\nexport default MainNavigator\n","import { connect } from 'react-redux'\nimport React, { memo, useCallback } from 'react'\nimport { Dimensions, FlatList, StyleSheet, Text, View } from 'react-native'\n\nimport Card from '../Card'\nimport {\n  convertServerCardColorToCardColor,\n  GlobalState,\n  Player,\n  SERVER_CARD_COLOR\n} from '../../interfaces'\n\ninterface StateProps {\n  asset: {\n    color?: SERVER_CARD_COLOR\n    number?: number\n  }\n  currentPlayerTurnId: string\n  players: Player[]\n}\n\ntype Props = StateProps\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  asset: {\n    color: !!(state.game.oldAssetColor && state.game.oldAssetNumber)\n      ? state.game.oldAssetColor\n      : state.game.round?.asset,\n    number: !!(state.game.oldAssetColor && state.game.oldAssetNumber)\n      ? state.game.oldAssetNumber\n      : state.game.round?.assetNumber\n  },\n  currentPlayerTurnId: state.game.currentPlayerTurn?._id ?? '',\n  players: state.game.players\n})\n\nconst InGameHeader = connect(\n  mapStateToProps\n)(memo<Props>(({\n  asset,\n  currentPlayerTurnId,\n  players\n}) => {\n  const renderPlayer = useCallback(({ item }: { item: Player }) => {\n    const isHisTurn = item._id === currentPlayerTurnId\n\n    return (\n      <View style={styles.row}>\n        <View style={styles.column}>\n          <Text style={styles.gridContent}>{isHisTurn ? '>' : ''}</Text>\n        </View>\n        <View style={styles.gridColumnName}>\n          <Text style={[styles.gridContent, isHisTurn && styles.currentTurnName]}>\n            {item.name}\n          </Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridContent}>\n            {typeof item.bet === 'number' ? item.bet : '...'}\n          </Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridContent}>{item.score}</Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridContent}>{item.turnWon}</Text>\n        </View>\n      </View>\n    )\n  }, [currentPlayerTurnId])\n\n  const renderItemSeparator = useCallback(() => {\n    return <View style={styles.separator} />\n  }, [])\n\n  const renderTableHeader = useCallback(() => {\n    return (\n      <View style={styles.row}>\n        <View style={styles.column} />\n        <View style={styles.gridColumnName}>\n          <Text style={styles.gridHeader}>Nom</Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridHeader}>Contrat</Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridHeader}>Score</Text>\n        </View>\n        <View style={[styles.gridColumn, styles.center]}>\n          <Text style={styles.gridHeader}>Plis</Text>\n        </View>\n      </View>\n    )\n  }, [])\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.gridContainer}>\n        <FlatList\n          listKey='firstPlayers'\n          data={players}\n          keyExtractor={item => item._id}\n          renderItem={renderPlayer}\n          ListHeaderComponent={renderTableHeader}\n          ItemSeparatorComponent={renderItemSeparator}\n        />\n      </View>\n      <View style={[styles.column, styles.flexEnd]}>\n        <View>\n          <Text style={styles.title}>\n            Atout :\n          </Text>\n          {!!(asset.number && asset.color) && (\n            <Card\n              color={convertServerCardColorToCardColor(asset.color)}\n              identifier={`${asset.color}-${asset.number}`}\n              number={asset.number}\n              value={asset.number}\n              width={Math.min(Math.floor((Dimensions.get('window').width - 30) / 4), 120)}\n            />\n          )}\n        </View>\n      </View>\n    </View>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  center: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n\n  column: {\n    flex: 1\n  },\n\n  container: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginHorizontal: 15\n  },\n\n  currentTurnName: {\n    color: 'blue'\n  },\n\n  flexEnd: {\n    alignItems: 'flex-end'\n  },\n\n  gridColumn: {\n    flex: 4\n  },\n\n  gridColumnName: {\n    flex: 7\n  },\n\n  gridContainer: {\n    flex: 2\n  },\n\n  gridContent: {\n    fontSize: 10\n  },\n\n  gridHeader: {\n    fontSize: 11\n  },\n\n  row: {\n    flexDirection: 'row'\n  },\n\n  separator: {\n    borderBottomColor: 'black',\n    borderBottomWidth: 1\n  },\n\n  title: {\n    marginBottom: 10\n  }\n})\n\nexport default InGameHeader\n","import React, { memo } from 'react'\nimport { StyleSheet, Text, View } from 'react-native'\n\nimport Card from '../Card'\nimport { convertServerCardToCard } from '../../utils'\nimport { PlayedCard as PlayedCardInterface } from '../../interfaces'\n\ninterface Props extends PlayedCardInterface {\n  width?: number\n}\n\nconst PlayedCard = memo<Props>(({\n  card: serverCard,\n  player,\n  width\n}) => {\n  const card = convertServerCardToCard(serverCard)\n\n  return (\n    <View style={styles.cardContainer}>\n      <Text>{player.name}</Text>\n      <Card {...card} width={width} />\n    </View>\n  )\n})\n\nconst styles = StyleSheet.create({\n  cardContainer: {\n    marginHorizontal: 5\n  }\n})\n\nexport default PlayedCard\n","import { connect } from 'react-redux'\nimport React, { memo, useCallback } from 'react'\nimport { FlatList, StyleSheet, Text } from 'react-native'\n\nimport PlayedCardComponent from './PlayedCard'\nimport { GlobalState, PlayedCard } from '../../interfaces'\n\ninterface StateProps {\n  playedCards: PlayedCard[]\n}\n\ntype Props = StateProps\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  playedCards: state.game.oldPlayedCards.length\n    ? state.game.oldPlayedCards\n    : state.game.playedCards\n})\n\nconst InGamePlayedCards = connect(mapStateToProps)(memo<Props>(({\n  playedCards\n}) => {\n  const renderPlayedCard = useCallback(({ item }: { item: PlayedCard }) => (\n    <PlayedCardComponent {...item} />\n  ), [])\n\n  return (\n    <>\n      <Text style={styles.title}>Cartes jouées :</Text>\n\n      <FlatList\n        keyExtractor={item => `${item.card._id}-${item.player._id}`}\n        data={playedCards}\n        horizontal\n        renderItem={renderPlayedCard}\n        contentContainerStyle={styles.contentContainer}\n        showsHorizontalScrollIndicator={false}\n      />\n    </>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  contentContainer: {\n    paddingHorizontal: 10\n  },\n\n  title: {\n    marginBottom: 10,\n    marginHorizontal: 15\n  }\n})\n\nexport default InGamePlayedCards\n","import React, { memo } from 'react'\nimport { StackNavigationProp } from '@react-navigation/stack'\nimport {\n  Alert,\n  FlatList,\n  Platform,\n  SafeAreaView,\n  StyleSheet\n} from 'react-native'\n\nimport EndModal from '../components/InGame/EndModal'\nimport InGameFooter from '../components/InGame/Footer'\nimport InGameHeader from '../components/InGame/Header'\nimport InGamePlayedCards from '../components/InGame/PlayedCards'\nimport { MainStackParamList, ROUTE_NAMES } from '../navigation/main'\n\ninterface Props {\n  navigation: StackNavigationProp<MainStackParamList, ROUTE_NAMES.IN_GAME>\n}\n\n\nconst InGame = memo<Props>(({ navigation }) => {\n  React.useEffect(\n    () =>\n      navigation.addListener('beforeRemove', (e) => {\n        // Prevent default behavior of leaving the screen\n        e.preventDefault()\n\n        // Prompt the user before leaving the screen\n        Alert.alert(\n          'Quitter la partie',\n          'Vous ne pourrez pas réintégrer la partie...',\n          [\n            { text: 'Rester', style: 'cancel', onPress: () => {} },\n            {\n              text: 'Quitter la partie',\n              style: 'destructive',\n              // If the user confirmed, then we dispatch\n              // the action we blocked earlier\n              // This will continue the action that had\n              // triggered the removal of the screen\n              onPress: () => navigation.dispatch(e.data.action),\n            },\n          ]\n        );\n      }),\n    [navigation]\n  )\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        data={[]}\n        renderItem={() => null}\n        contentContainerStyle={styles.contentContainer}\n        ListHeaderComponent={<InGameHeader />}\n        ListEmptyComponent={<InGamePlayedCards />}\n        ListFooterComponent={<InGameFooter />}\n      />\n\n      <EndModal />\n    </SafeAreaView>\n  )\n})\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: Platform.OS === 'android' ? 50 : undefined\n  },\n\n  contentContainer: {\n    flexGrow: 1,\n    width: '100%'\n  }\n})\n\nexport default InGame\n","import React, { memo, useCallback } from 'react'\nimport { connect } from 'react-redux'\nimport {\n  ActivityIndicator,\n  FlatList, Platform,\n  SafeAreaView,\n  StyleSheet,\n  Text,\n  View,\n} from 'react-native'\n\nimport { Game, GlobalState, Player } from '../interfaces'\n\ninterface StateProps {\n  game: Game\n  player: Player\n  gamePlayers: Player[]\n}\n\ntype Props = StateProps\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  game: state.game.game!,\n  player: state.game.player!,\n  gamePlayers: state.game.players\n})\n\nconst GameLobby = connect(mapStateToProps)(memo<Props>(({ game, gamePlayers, player }: Props) => {\n  const renderPlayer = useCallback(({ item }: { item: Player }) => (\n    <View style={styles.playerContainer}>\n      <Text style={styles.title}>\n        {`${item.name}${item._id === player._id ? ' (moi)' : ''}`}\n      </Text>\n      <Text>{`Identifiant : ${item._id}`}</Text>\n      <Text>{`Score : ${item.score}`}</Text>\n      <Text>{`Socket : ${item.socketId}`}</Text>\n    </View>\n  ), [player])\n\n  return (\n    <SafeAreaView>\n      <View style={styles.gameContainer}>\n        <Text style={styles.title}>PARTIE</Text>\n        <Text>{`Nom : ${game.name}`}</Text>\n        <Text>{`Identifiant : ${game._id}`}</Text>\n        <Text>{`Places libres : ${game.nbPlayers - gamePlayers.length}`}</Text>\n      </View>\n      <FlatList\n        keyExtractor={item => item._id}\n        data={gamePlayers}\n        renderItem={renderPlayer}\n        style={styles.playersContainer}\n      />\n      <View style={styles.activityIndicatorView}>\n        <ActivityIndicator color={Platform.OS === 'android' ? 'grey' : undefined} />\n        <Text style={styles.activityIndicatorText}>En attente d'autres joueurs...</Text>\n      </View>\n    </SafeAreaView>\n  )\n}))\n\nconst styles = StyleSheet.create({\n  activityIndicatorText: {\n    marginLeft: 10\n  },\n\n  activityIndicatorView: {\n    alignItems: 'center',\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginVertical: 15,\n    paddingHorizontal: 15\n  },\n\n  gameContainer: {\n    backgroundColor: 'white',\n    borderColor: 'grey',\n    borderRadius: 3,\n    borderWidth: 1,\n    marginVertical: 10,\n    marginHorizontal: 15,\n    paddingHorizontal: 15,\n    paddingVertical: 10\n  },\n\n  playerContainer: {\n    marginVertical: 10\n  },\n\n  playersContainer: {\n    backgroundColor: 'white',\n    borderColor: 'grey',\n    borderRadius: 3,\n    borderWidth: 1,\n    marginHorizontal: 15,\n    paddingHorizontal: 15\n  },\n\n  title: {\n    fontWeight: 'bold',\n    marginBottom: 10\n  }\n})\n\nexport default GameLobby\n","import Constants from 'expo-constants'\n\nexport const WS_URL = Constants.manifest.extra.WS_URL\n","import { Message } from '../interfaces'\n\nexport const formatPacketMessage = ({ to, message }: { to: string; message: any }): Message => ({\n  send_packet: { to, message }\n})\n\nexport const formatConnectMessage = (...channels: string[]): Message => ({\n  connect_to: channels\n})\n","import { put, select, takeLatest } from 'redux-saga/effects'\n\nimport { formatPacketMessage } from '../../utils/webSocket'\nimport { GAME_ACTION_TYPES, sendMessage, WEB_SOCKET_CHANNEL } from '../actions'\nimport {\n  GlobalState,\n  TypedStoreAction,\n  WEB_SOCKET_ACTION\n} from '../../interfaces'\n\nfunction * initGame ({\n  data: {\n    name,\n    nbPlayers\n  }\n}: TypedStoreAction<\n  GAME_ACTION_TYPES.INIT_GAME,\n  {\n    name: string\n    nbPlayers: number\n  }\n>) {\n  const message = formatPacketMessage({\n    to: WEB_SOCKET_CHANNEL.LOBBY,\n    message: { action: WEB_SOCKET_ACTION.INIT_GAME, data: { name, nbPlayers } }\n  })\n\n  yield put(sendMessage(message))\n}\n\nfunction * listGames () {\n  const message = formatPacketMessage({\n    to: WEB_SOCKET_CHANNEL.LOBBY,\n    message: { action: WEB_SOCKET_ACTION.LIST_GAMES }\n  })\n\n  yield put(sendMessage(message))\n}\n\nfunction * joinGame ({\n  data: {\n    game,\n    name\n  }\n}: TypedStoreAction<\n  GAME_ACTION_TYPES.JOIN_GAME,\n  {\n    game: string\n    name: string\n  }\n>) {\n  const message = formatPacketMessage({\n    to: WEB_SOCKET_CHANNEL.LOBBY,\n    message: { action: WEB_SOCKET_ACTION.JOIN_GAME, data: { game, name } }\n  })\n\n  yield put(sendMessage(message))\n}\n\nfunction * setBet ({\n  data: { bet }\n}: TypedStoreAction<\n  GAME_ACTION_TYPES.SET_BET,\n  { bet: number }\n>) {\n  const game = yield select((state: GlobalState) => state.game.game?._id)\n\n  const message = formatPacketMessage({\n    to: game,\n    message: { action: WEB_SOCKET_ACTION.SET_BET, data: { bet } }\n  })\n\n  yield put(sendMessage(message))\n}\n\nfunction * playCard ({\n  data: { cardId: playerCard }\n}: TypedStoreAction<GAME_ACTION_TYPES.PLAY_CARD, { cardId: string }>) {\n  const game = yield select((state: GlobalState) => state.game.game?._id)\n  const gameTurn = yield select((state: GlobalState) => state.game.turn?._id)\n\n  const message = formatPacketMessage({\n    to: game,\n    message: {\n      action: WEB_SOCKET_ACTION.PLAY_CARD,\n      data: { playerCard, gameTurn }\n    }\n  })\n\n  yield put(sendMessage(message))\n}\n\nexport function * gameSaga () {\n  yield takeLatest(GAME_ACTION_TYPES.JOIN_GAME, joinGame)\n  yield takeLatest(GAME_ACTION_TYPES.INIT_GAME, initGame)\n  yield takeLatest(GAME_ACTION_TYPES.LIST_GAMES, listGames)\n  yield takeLatest(GAME_ACTION_TYPES.SET_BET, setBet)\n  yield takeLatest(GAME_ACTION_TYPES.PLAY_CARD, playCard)\n}\n","import { createRef } from 'react'\nimport { Keyboard } from 'react-native'\nimport { NavigationContainerRef } from '@react-navigation/native'\n\nexport const navigationRef = createRef<NavigationContainerRef>()\n\nexport function navigate (name: string, params?: object) {\n  Keyboard.dismiss()\n  navigationRef.current?.navigate(name, params)\n}\n","import { Alert } from 'react-native'\nimport { call, put, select, takeEvery } from 'redux-saga/effects'\nimport {\n  Game,\n  GlobalState,\n  ServerMessage,\n  TypedStoreAction,\n  WEB_SOCKET_ACTION,\n  WebSocketData\n} from '../../interfaces'\n\nimport { ROUTE_NAMES } from '../../navigation/main'\nimport { navigate } from '../../navigation/NavigationActions'\nimport { formatConnectMessage } from '../../utils/webSocket'\nimport {\n  cardPlayed,\n  endGame,\n  gameFull,\n  gameInit,\n  gameJoined,\n  gamesList,\n  listGames,\n  sendMessage,\n  setBetForPlayer,\n  setCardColor,\n  setGame,\n  setGameRound,\n  setGameWithGameId,\n  setHand,\n  setPlayer,\n  setPlayers,\n  setScore,\n  setSocketId,\n  setTurn,\n  setTurnWinner,\n  shouldPlayCard,\n  shouldSetBet,\n  WEB_SOCKET_ACTION_TYPES,\n  WEB_SOCKET_CHANNEL\n} from '../actions'\n\nfunction * connectedSaga () {\n  yield put(sendMessage(formatConnectMessage(WEB_SOCKET_CHANNEL.LOBBY)))\n}\n\nfunction * messageReceivedSaga ({\n  data: { message }\n}: TypedStoreAction<\n  WEB_SOCKET_ACTION_TYPES.MESSAGE_RECEIVED,\n  { message: ServerMessage }\n>) {\n  console.log(message)\n  const {\n    from, // eslint-disable-line\n    message: { action, data, message: messageMessage },\n    to\n  } = message\n\n  switch (action) {\n    case WEB_SOCKET_ACTION.GAMES_LIST:\n      yield put(gamesList(data as Game[]))\n      break\n\n    case WEB_SOCKET_ACTION.ERROR:\n      Alert.alert(WEB_SOCKET_ACTION.ERROR, messageMessage)\n      break\n\n    case WEB_SOCKET_ACTION.GAME_INIT:\n      if (data?.player && data?.game) {\n        yield put(setGame(data.game))\n        yield put(setPlayer(data.player))\n        yield call(navigate, ROUTE_NAMES.GAME_LOBBY)\n      } else {\n        yield put(gameInit(data))\n      }\n      break\n\n    case WEB_SOCKET_ACTION.GAME_JOINED:\n      const socketId = yield select( //eslint-disable-line\n        (state: GlobalState) => state.webSocket.socketId\n      )\n\n      if (socketId === data.socketId) {\n        yield put(setPlayer(data))\n        yield put(setGameWithGameId(to))\n        yield call(navigate, ROUTE_NAMES.GAME_LOBBY)\n      }\n\n      yield put(gameJoined({ gameId: to, player: data }))\n      break\n\n    case WEB_SOCKET_ACTION.SET_GAME_ROUND:\n      yield put(setGameRound(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_PLAYERS:\n    case WEB_SOCKET_ACTION.SET_PLAYER_POSITION:\n      yield put(setPlayers(data))\n      break\n\n    case WEB_SOCKET_ACTION.GAME_STARTED:\n      yield call(navigate, ROUTE_NAMES.IN_GAME)\n      break\n\n    case WEB_SOCKET_ACTION.GAME_FULL:\n      yield put(gameFull(data))\n      break\n\n    case WEB_SOCKET_ACTION.WELCOME:\n      yield put(setSocketId(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_CARDS:\n      yield put(setHand(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_TURN:\n      yield put(setTurn(data))\n      break\n\n    case WEB_SOCKET_ACTION.BET_SET:\n      yield put(setBetForPlayer(data))\n      break\n\n    case WEB_SOCKET_ACTION.CARD_PLAYED:\n      yield put(cardPlayed(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_CARD_COLOR:\n      yield put(setCardColor(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_SCORE:\n      yield put(setScore(data))\n      break\n\n    case WEB_SOCKET_ACTION.SET_TURN_WINNER:\n      yield put(setTurnWinner(data))\n      break\n\n    case WEB_SOCKET_ACTION.SHOULD_SET_BET:\n      yield put(shouldSetBet(data))\n      break\n\n    case WEB_SOCKET_ACTION.SHOULD_PLAY_CARD:\n      yield put(shouldPlayCard(data))\n      break\n\n    case WEB_SOCKET_ACTION.END_GAME:\n      yield put(endGame(data))\n      break\n\n    default:\n      console.log(`NOT_HANDLED: ${action}`)\n      break\n  }\n}\n\nfunction * invalidMessageReceivedSaga ({\n  data: { message }\n}: TypedStoreAction<\n  WEB_SOCKET_ACTION_TYPES.INVALID_MESSAGE_RECEIVED,\n  { message: WebSocketData }\n>) {\n  console.log(message)\n\n  if (message === `Connected to ${WEB_SOCKET_CHANNEL.LOBBY}.`) {\n    yield put(listGames())\n  }\n}\n\nexport function * webSocketSaga () {\n  yield takeEvery(\n    WEB_SOCKET_ACTION_TYPES.CONNECTED,\n    connectedSaga\n  )\n\n  yield takeEvery(\n    WEB_SOCKET_ACTION_TYPES.MESSAGE_RECEIVED,\n    messageReceivedSaga\n  )\n\n  yield takeEvery(\n    WEB_SOCKET_ACTION_TYPES.INVALID_MESSAGE_RECEIVED,\n    invalidMessageReceivedSaga\n  )\n}\n","import { GAME_ACTION_TYPES } from '../actions'\nimport { TURN_ACTION } from '../../constants/turn_action'\nimport {\n  Game,\n  PlayedCard,\n  Player,\n  PlayerCard,\n  Reaction,\n  Round,\n  RoundTurn,\n  SERVER_CARD_COLOR,\n  StoreAction\n} from '../../interfaces'\n\nexport interface GameState {\n  color?: SERVER_CARD_COLOR\n  currentPlayerTurn?: Player\n  finalRoundCount?: number\n  game?: Game\n  games: Game[]\n  hand: PlayerCard[]\n  oldAssetColor?: SERVER_CARD_COLOR\n  oldAssetNumber?: number\n  oldPlayedCards: PlayedCard[]\n  playedCards: PlayedCard[]\n  player?: Player\n  players: Player[]\n  round?: Round\n  turn?: RoundTurn\n  turnWinner?: Player\n  turnAction: TURN_ACTION\n  winner?: Player\n}\n\nconst initialState: GameState = {\n  games: [],\n  hand: [],\n  oldPlayedCards: [],\n  playedCards: [],\n  players: [],\n  turnAction: TURN_ACTION.BET\n}\n\nconst reactions: Record<GAME_ACTION_TYPES, Reaction<GameState, GAME_ACTION_TYPES>> = {\n  [GAME_ACTION_TYPES.CARD_PLAYED]: (state, { data }) => ({\n    ...state,\n    playedCards: [...state.playedCards, data.card]\n  }),\n  [GAME_ACTION_TYPES.END_GAME]: (state, { data }) => ({\n    ...state,\n    finalRoundCount: data.roundCount,\n    winner: data.winner\n  }),\n  [GAME_ACTION_TYPES.GAME_FULL]: (state, { data }) => ({\n    ...state,\n    games: state.games.filter(game => game._id !== data.gameId)\n  }),\n  [GAME_ACTION_TYPES.GAME_INIT]: (state, { data }) => ({\n    ...state,\n    games: [...state.games, data.game]\n  }),\n  [GAME_ACTION_TYPES.GAME_JOINED]: (state, { data }) => {\n    if (data?.gameId === state.game?._id && !state.players.find(player => player._id === data.player._id)) {\n      return {\n        ...state,\n        players: [...state.players, data.player]\n      }\n    }\n    return { ...state }\n  },\n  [GAME_ACTION_TYPES.GAMES_LIST]: (state, { data }) => ({\n    ...state,\n    games: data.games\n  }),\n  [GAME_ACTION_TYPES.INIT_GAME]: (state) => ({ ...state }),\n  [GAME_ACTION_TYPES.JOIN_GAME]: (state) => ({ ...state }),\n  [GAME_ACTION_TYPES.LIST_GAMES]: (state) => ({ ...state }),\n  [GAME_ACTION_TYPES.PLAY_CARD]: (state, { data }) => ({\n    ...state,\n    hand: state.hand.filter(card => card._id !== data.cardId)\n  }),\n  [GAME_ACTION_TYPES.SET_BET]: (state, { data }) => ({\n    ...state,\n    player: state.player && {\n      ...state.player,\n      bet: data.bet as number\n    },\n    players: state.players.map(player => {\n      if (player._id === state.player?._id) {\n        return {\n          ...player,\n          bet: data.bet as number\n        }\n      }\n      return player\n    })\n  }),\n  [GAME_ACTION_TYPES.REMOVE_OLD_PLAYED_CARDS]: (state) => ({\n    ...state,\n    oldAssetColor: undefined,\n    oldAssetNumber: undefined,\n    oldPlayedCards: []\n  }),\n  [GAME_ACTION_TYPES.SET_BET_FOR_PLAYER]: (state, { data }) => ({\n    ...state,\n    players: state.players.map(player => {\n      if (player._id === data.player) {\n        return {\n          ...player,\n          bet: data.bet as number\n        }\n      }\n      return player\n    })\n  }),\n  [GAME_ACTION_TYPES.SET_CARD_COLOR]: (state, { data }) => ({\n    ...state,\n    color: data.color\n  }),\n  [GAME_ACTION_TYPES.SET_HAND]: (state, { data }) => ({\n    ...state,\n    hand: data.cards,\n    playedCards: []\n  }),\n  [GAME_ACTION_TYPES.SET_GAME]: (state, { data }) => ({\n    ...state,\n    game: data?.game\n  }),\n  [GAME_ACTION_TYPES.SET_GAME_ROUND]: (state, { data }) => ({\n    ...state,\n    player: state.player && { ...state.player, bet: undefined, turnWon: 0 },\n    players: state.players.map(player => ({ ...player, bet: undefined, turnWon: 0 })),\n    round: data?.round\n  }),\n  [GAME_ACTION_TYPES.SET_GAME_WITH_GAME_ID]: (state, { data }) => ({\n    ...state,\n    game: state.games.find(game => game._id === data.gameId)\n  }),\n  [GAME_ACTION_TYPES.SET_PLAYER]: (state, { data }) => ({\n    ...state,\n    player: data?.player\n  }),\n  [GAME_ACTION_TYPES.SET_PLAYERS]: (state, { data }) => ({\n    ...state,\n    players: data?.players.map((player: Player) => ({ ...player, turnWon: 0 }))\n  }),\n  [GAME_ACTION_TYPES.SET_SCORE]: (state, { data }) => ({\n    ...state,\n    players: state.players.map(player => {\n      if (player._id === data.player) {\n        return {\n          ...player,\n          score: data.score\n        }\n      }\n      return player\n    })\n  }),\n  [GAME_ACTION_TYPES.SET_TURN]: (state, { data }) => ({\n    ...state,\n    turn: data.turn\n  }),\n  [GAME_ACTION_TYPES.SET_TURN_WINNER]: (state, { data }) => ({\n    ...state,\n    color: undefined,\n    oldAssetColor: state.round?.asset,\n    oldAssetNumber: state.round?.assetNumber,\n    oldPlayedCards: [...state.playedCards],\n    playedCards: [],\n    players: state.players.map(player => {\n      if (player._id === data.player._id) {\n        return {\n          ...player,\n          turnWon: (player.turnWon || 0) + 1\n        }\n      }\n\n      return player\n    }),\n    turnWinner: data.player\n  }),\n  [GAME_ACTION_TYPES.SHOULD_PLAY_CARD]: (state, { data }) => ({\n    ...state,\n    currentPlayerTurn: data.player,\n    turnAction: TURN_ACTION.PLAY_CARD\n  }),\n  [GAME_ACTION_TYPES.SHOULD_SET_BET]: (state, { data }) => ({\n    ...state,\n    currentPlayerTurn: data.player,\n    turnAction: TURN_ACTION.BET\n  })\n}\n\nexport const gameReducer = (prevState: GameState, action: StoreAction<GAME_ACTION_TYPES>): GameState => {\n  const state = prevState || initialState\n\n  if (action && reactions[action.type]) {\n    return reactions[action.type](state, action)\n  }\n\n  return { ...state }\n}\n","import { WEB_SOCKET_ACTION_TYPES } from '../actions'\nimport { Reaction, StoreAction } from '../../interfaces'\n\nexport interface WebSocketState {\n  channel: string\n  connected: boolean\n  socketId?: number\n}\n\nconst initialState: WebSocketState = {\n  channel: '',\n  connected: false\n}\n\nconst reactions: Record<WEB_SOCKET_ACTION_TYPES, Reaction<WebSocketState, WEB_SOCKET_ACTION_TYPES>> = {\n  [WEB_SOCKET_ACTION_TYPES.CONNECTED]: (state) => ({ ...state, connected: true }),\n  [WEB_SOCKET_ACTION_TYPES.DISCONNECTED]: (state) => ({ ...state, connected: false }),\n  [WEB_SOCKET_ACTION_TYPES.INVALID_MESSAGE_RECEIVED]: (state) => ({ ...state }),\n  [WEB_SOCKET_ACTION_TYPES.MESSAGE_RECEIVED]: (state) => ({ ...state }),\n  [WEB_SOCKET_ACTION_TYPES.SEND_MESSAGE]: (state) => ({ ...state }),\n  [WEB_SOCKET_ACTION_TYPES.SET_SOCKET_ID]: (state, { data }) => ({ ...state, socketId: data.socketId })\n}\n\nexport const webSocketReducer = (prevState: WebSocketState, action: StoreAction<WEB_SOCKET_ACTION_TYPES>): WebSocketState => {\n  const state = prevState || initialState\n\n  if (action && reactions[action.type]) {\n    return reactions[action.type](state, action)\n  }\n\n  return { ...state }\n}\n","import { MiddlewareAPI } from 'redux'\nimport { TypeSocket } from 'typesocket'\nimport { Alert, Platform } from 'react-native'\n\nimport { Message } from '../../../interfaces'\nimport { WS_URL } from '../../../constants/env'\nimport {\n  invalidMessageReceived,\n  messageReceived,\n  WEB_SOCKET_ACTION_TYPES\n} from '../../actions'\n\nexport const webSocketMiddleware = (url: string) => {\n  return (store: MiddlewareAPI<any, any>) => {\n    const socket = new TypeSocket<Message>(url)\n    let hasConnected = false\n\n    // We dispatch the actions for further handling here:\n    socket.on('connected', () => {\n      hasConnected = true\n      console.log('connected')\n      return store.dispatch({ type: WEB_SOCKET_ACTION_TYPES.CONNECTED })\n    })\n    socket.on('disconnected', () => {\n      if (!hasConnected) {\n        return\n      }\n      console.log('disconnected')\n      if (Platform.OS === 'web') {\n        /* global alert */\n        alert(`Veuillez relancer l'app s'il-vous-plaît.\\n${WS_URL}`)\n      } else {\n        Alert.alert(\n          'Un problème est survenu',\n          `Veuillez relancer l'app s'il-vous-plaît.\\n${WS_URL}`\n        )\n      }\n      return store.dispatch({ type: WEB_SOCKET_ACTION_TYPES.DISCONNECTED })\n    })\n    socket.on(\n      'message',\n      (message) =>\n        store.dispatch(messageReceived(message))\n    )\n    socket.on(\n      'invalidMessage',\n      (message) =>\n        store.dispatch(invalidMessageReceived(message))\n    )\n    socket.connect()\n\n    return (next: (action: any) => void) => (action: any) => {\n      // We're acting on an action with type of SEND_MESSAGE.\n      // Don't forget to check if the socket is in readyState == 1.\n      // Other readyStates may result in an exception being thrown.\n      if (action.type && action.type === WEB_SOCKET_ACTION_TYPES.SEND_MESSAGE) {\n        if (socket.readyState === 1) {\n          console.log('send message', action.data.message)\n          socket.send(action.data.message)\n        } else {\n          socket.connect()\n        }\n      }\n\n      return next(action)\n    }\n  }\n}\n","import createSagaMiddleware from 'redux-saga'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\n\nimport { WS_URL } from '../../constants/env'\nimport { gameSaga, webSocketSaga } from '../saga'\nimport { webSocketMiddleware } from './middlewares'\nimport { gameReducer, webSocketReducer } from '../reducer'\n\nconst persistConfig = {\n  key: 'root',\n  storage: AsyncStorage\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst reducers = combineReducers({\n  game: gameReducer,\n  webSocket: webSocketReducer\n})\n\nconst persistedReducer = persistReducer(persistConfig, reducers)\n\nexport const store = createStore(\n  persistedReducer,\n  applyMiddleware(webSocketMiddleware(WS_URL), sagaMiddleware)\n)\n\nexport const persistedStore = persistStore(store)\n\nsagaMiddleware.run(gameSaga)\nsagaMiddleware.run(webSocketSaga)\n","import React from 'react'\nimport { Provider } from 'react-redux'\nimport { PersistGate} from 'redux-persist/integration/react'\nimport { NavigationContainer } from '@react-navigation/native'\n\nimport MainNavigator from './src/navigation/main'\nimport { persistedStore, store } from './src/redux/store'\nimport { navigationRef } from './src/navigation/NavigationActions'\n\nconst App = () => (\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistedStore}>\n      <NavigationContainer ref={navigationRef}>\n        <MainNavigator />\n      </NavigationContainer>\n    </PersistGate>\n  </Provider>\n)\n\nexport default App\n","import 'react-native-gesture-handler';\nimport { registerRootComponent } from 'expo';\n\nimport App from './App';\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n"],"sourceRoot":""}